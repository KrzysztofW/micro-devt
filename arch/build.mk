ifeq ($(CONFIG_ARCH),X86_TUN_TAP)
ARCH = x86

else ifeq ($(CONFIG_ARCH),X86_TEST)

ARCH = x86

else ifeq ($(CONFIG_ARCH),AVR)
ifeq "$(or $(CONFIG_USART0), $(CONFIG_USART1))" "y"
	SOURCES += $(ARCH_DIR)/avr/_stdio.c
	SOURCES += $(ARCH_DIR)/avr/usart.c
endif

AVR_FLAGS = -DF_CPU=${CONFIG_AVR_F_CPU} -mmcu=${CONFIG_AVR_MCU}
AVR_FLAGS += -DF_CPU=$(CONFIG_AVR_F_CPU) -DCONFIG_AVR_MCU
AVR_FLAGS += -DCONFIG_AVR_F_CPU=$(CONFIG_AVR_F_CPU)
ifeq ($(CONFIG_AVR_MCU),attiny85)
AVR_FLAGS += -DATTINY85
endif
ifeq ($(CONFIG_AVR_MCU),atmega2561)
AVR_FLAGS += -DATMEGA2561
endif
ifeq ($(CONFIG_AVR_MCU),atmega328p)
AVR_FLAGS += -DATMEGA328P
endif

CFLAGS += $(AVR_FLAGS)
LDFLAGS += $(AVR_FLAGS)

ARCH = avr
CC = avr-gcc
AR = avr-ar
endif

ifeq ($(ARCH),x86)
CFLAGS += -DX86
CC = gcc
AR = ar
endif

CFLAGS += -I$(ARCH_DIR)/$(ARCH)

CFLAGS += -DCONFIG_TIMER_RESOLUTION_US=$(CONFIG_TIMER_RESOLUTION_US)

# Do not use a too small timer resolution on x86 in order
# not to have a busy CPU.
ifeq ($(CONFIG_ARCH),X86_TUN_TAP)
ifeq ($(shell test $(CONFIG_TIMER_RESOLUTION_US) -lt 1000; echo $$?),0)
CONFIG_TIMER_RESOLUTION_US=1000
endif
endif

ifeq ($(shell test $(CONFIG_TIMER_RESOLUTION_US) -gt 1000; echo $$?),0)
CONFIG_TIMER_RESOLUTION_MS=CONFIG_TIMER_RESOLUTION_US/1000
CFLAGS += -DCONFIG_TIMER_RESOLUTION_MS=$(CONFIG_TIMER_RESOLUTION_MS)
endif
